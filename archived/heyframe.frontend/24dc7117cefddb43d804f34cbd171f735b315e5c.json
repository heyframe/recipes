{
    "manifests": {
        "heyframe/frontend": {
            "manifest": {
                "bundles": {
                    "HeyFrame\\Frontend\\Frontend": [
                        "all"
                    ]
                },
                "copy-from-recipe": {
                    "bin/": "%BIN_DIR%/"
                },
                "env": {
                    "PROXY_URL": "http://localhost",
                    "HEYFRAME_HTTP_CACHE_ENABLED": "1",
                    "HEYFRAME_HTTP_DEFAULT_TTL": "7200"
                }
            },
            "files": {
                "bin/build-storefront.sh": {
                    "contents": [
                        "#!/usr/bin/env bash",
                        "",
                        "unset CDPATH",
                        "CWD=\"$(cd -P -- \"$(dirname -- \"${BASH_SOURCE[0]}\")\" && pwd -P)\"",
                        "",
                        "set -euo pipefail",
                        "",
                        "export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true",
                        "export PROJECT_ROOT=\"${PROJECT_ROOT:-\"$(dirname \"$CWD\")\"}\"",
                        "export NPM_CONFIG_FUND=false",
                        "export NPM_CONFIG_AUDIT=false",
                        "export NPM_CONFIG_UPDATE_NOTIFIER=false",
                        "",
                        "if [[ -e \"${PROJECT_ROOT}/vendor/heyframe/platform\" ]]; then",
                        "    STOREFRONT_ROOT=\"${STOREFRONT_ROOT:-\"${PROJECT_ROOT}/vendor/heyframe/platform/src/Frontend\"}\"",
                        "else",
                        "    STOREFRONT_ROOT=\"${STOREFRONT_ROOT:-\"${PROJECT_ROOT}/vendor/heyframe/frontend\"}\"",
                        "fi",
                        "",
                        "BIN_TOOL=\"${CWD}/console\"",
                        "",
                        "if [[ ${CI:-\"\"} ]]; then",
                        "    BIN_TOOL=\"${CWD}/ci\"",
                        "",
                        "    if [[ ! -x \"$BIN_TOOL\" ]]; then",
                        "        chmod +x \"$BIN_TOOL\"",
                        "    fi",
                        "fi",
                        "",
                        "# build frontend",
                        "[[ ${HEYFRAME_SKIP_BUNDLE_DUMP:-\"\"} ]] || \"${BIN_TOOL}\" bundle:dump",
                        "[[ ${HEYFRAME_SKIP_FEATURE_DUMP:-\"\"} ]] || \"${BIN_TOOL}\" feature:dump",
                        "",
                        "if [[ $(command -v jq) ]]; then",
                        "    OLDPWD=$(pwd)",
                        "    cd \"$PROJECT_ROOT\" || exit",
                        "    basePaths=()",
                        "",
                        "    while read -r config; do",
                        "        srcPath=$(echo \"$config\" | jq -r '(.basePath + .frontend.path)')",
                        "        basePath=$(echo \"$config\" | jq -r '.basePath')",
                        "",
                        "        # the package.json files are always one upper",
                        "        path=$(dirname \"$srcPath\")",
                        "        name=$(echo \"$config\" | jq -r '.technicalName' )",
                        "",
                        "        skippingEnvVarName=\"SKIP_$(echo \"$name\" | sed -e 's/\\([a-z]\\)/\\U\\1/g' -e 's/-/_/g')\"",
                        "",
                        "        if [[ ${!skippingEnvVarName:-\"\"} ]]; then",
                        "            continue",
                        "        fi",
                        "",
                        "        if [[ -n $srcPath && ! \" ${basePaths[*]:-} \" =~ \" ${basePath} \" ]]; then",
                        "",
                        "            basePaths+=(\"$basePath\")",
                        "        fi",
                        "",
                        "        if [[ -f \"$path/package.json\" && ! -d \"$path/node_modules\" && $name != \"frontend\" ]]; then",
                        "            echo \"=> Installing npm dependencies for ${name}\"",
                        "",
                        "            (cd \"$path\" && npm install --prefer-offline)",
                        "        fi",
                        "    done < <(jq -c '.[]' \"var/plugins.json\")",
                        "",
                        "    for basePath in \"${basePaths[@]}\"; do",
                        "        if [[ -r \"${basePath}/package.json\" ]]; then",
                        "            echo \"=> Installing npm dependencies for ${basePath}\"",
                        "            (cd \"${basePath}\" && npm ci --omit=dev --no-audit --prefer-offline)",
                        "        fi",
                        "",
                        "        if [[ -r \"${basePath}/../package.json\" ]]; then",
                        "            echo \"=> Installing npm dependencies for ${basePath}/..\"",
                        "            (cd \"${basePath}/..\" && npm ci --omit=dev --no-audit --prefer-offline)",
                        "        fi",
                        "    done",
                        "",
                        "    cd \"$OLDPWD\" || exit",
                        "else",
                        "    echo \"Cannot check extensions for required npm installations as jq is not installed\"",
                        "fi",
                        "",
                        "npm --prefix \"${STOREFRONT_ROOT}\"/Resources/app/frontend install --prefer-offline --omit=dev",
                        "node \"${STOREFRONT_ROOT}\"/Resources/app/frontend/copy-to-vendor.js",
                        "npm --prefix \"${STOREFRONT_ROOT}\"/Resources/app/frontend run production",
                        "[[ ${HEYFRAME_SKIP_ASSET_COPY:-\"\"} ]] ||\"${BIN_TOOL}\" assets:install",
                        "[[ ${HEYFRAME_SKIP_THEME_COMPILE:-\"\"} ]] || \"${BIN_TOOL}\" theme:compile --active-only",
                        "",
                        "if ! [ \"${1:-default}\" = \"--keep-cache\" ]; then",
                        "    \"${BIN_TOOL}\" cache:clear",
                        "fi",
                        ""
                    ],
                    "executable": true
                },
                "bin/watch-storefront.sh": {
                    "contents": [
                        "#!/usr/bin/env bash",
                        "",
                        "CWD=\"$(cd -P -- \"$(dirname -- \"${BASH_SOURCE[0]}\")\" && pwd -P)\"",
                        "",
                        "export PROJECT_ROOT=\"${PROJECT_ROOT:-\"$(dirname \"$CWD\")\"}\"",
                        "export ENV_FILE=${ENV_FILE:-\"${PROJECT_ROOT}/.env\"}",
                        "export NPM_CONFIG_FUND=false",
                        "export NPM_CONFIG_AUDIT=false",
                        "export NPM_CONFIG_UPDATE_NOTIFIER=false",
                        "",
                        "# shellcheck source=functions.sh",
                        "source \"${PROJECT_ROOT}/bin/functions.sh\"",
                        "",
                        "curenv=$(declare -p -x)",
                        "",
                        "load_dotenv \"$ENV_FILE\"",
                        "",
                        "# Restore environment variables set globally",
                        "set -o allexport",
                        "eval \"$curenv\"",
                        "set +o allexport",
                        "",
                        "export APP_URL",
                        "export PROXY_URL",
                        "export STOREFRONT_ASSETS_PORT",
                        "export STOREFRONT_PROXY_PORT",
                        "export STOREFRONT_HTTPS_KEY_FILE",
                        "export STOREFRONT_HTTPS_CERTIFICATE_FILE",
                        "export STOREFRONT_SKIP_SSL_CERT",
                        "",
                        "if [[ -e \"${PROJECT_ROOT}/vendor/heyframe/platform\" ]]; then",
                        "    STOREFRONT_ROOT=\"${STOREFRONT_ROOT:-\"${PROJECT_ROOT}/vendor/heyframe/platform/src/Frontend\"}\"",
                        "else",
                        "    STOREFRONT_ROOT=\"${STOREFRONT_ROOT:-\"${PROJECT_ROOT}/vendor/heyframe/frontend\"}\"",
                        "fi",
                        "",
                        "if [[ ! -d \"${STOREFRONT_ROOT}\"/Resources/app/frontend/node_modules/webpack-dev-server ]]; then",
                        "    npm --prefix \"${STOREFRONT_ROOT}\"/Resources/app/frontend install --prefer-offline",
                        "fi",
                        "",
                        "\"${CWD}\"/console bundle:dump",
                        "\"${CWD}\"/console feature:dump",
                        "\"${CWD}\"/console theme:compile --active-only",
                        "if [[ -n \"$1\" ]]; then",
                        "    \"${CWD}\"/console theme:dump --theme-name=\"$1\"",
                        "else",
                        "    \"${CWD}\"/console theme:dump",
                        "fi",
                        "",
                        "if [[ $(command -v jq) ]]; then",
                        "    OLDPWD=$(pwd)",
                        "    cd \"$PROJECT_ROOT\" || exit",
                        "",
                        "    jq -c '.[]' \"var/plugins.json\" | while read -r config; do",
                        "        srcPath=$(echo \"$config\" | jq -r '(.basePath + .frontend.path)')",
                        "",
                        "        # the package.json files are always one upper",
                        "        path=$(dirname \"$srcPath\")",
                        "        name=$(echo \"$config\" | jq -r '.technicalName' )",
                        "",
                        "        skippingEnvVarName=\"SKIP_$(echo \"$name\" | sed -e 's/\\([a-z]\\)/\\U\\1/g' -e 's/-/_/g')\"",
                        "",
                        "        if [[ ${!skippingEnvVarName:-\"\"} ]]; then",
                        "            continue",
                        "        fi",
                        "",
                        "        if [[ -f \"$path/package.json\" && ! -d \"$path/node_modules\" && $name != \"frontend\" ]]; then",
                        "            echo \"=> Installing npm dependencies for ${name}\"",
                        "",
                        "            (cd \"$path\" && npm install)",
                        "        fi",
                        "    done",
                        "    cd \"$OLDPWD\" || exit",
                        "else",
                        "    echo \"Cannot check extensions for required npm installations as jq is not installed\"",
                        "fi",
                        "",
                        "npm --prefix \"${STOREFRONT_ROOT}\"/Resources/app/frontend run-script hot-proxy",
                        ""
                    ],
                    "executable": true
                }
            },
            "ref": "24dc7117cefddb43d804f34cbd171f735b315e5c"
        }
    }
}
